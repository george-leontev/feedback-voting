datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        Int        @id @default(autoincrement())
    email     String     @unique
    password  String     @unique
    avatar    String
    createdAt DateTime   @default(now()) @map("created_at")
    feedbacks Feedback[]
    votes     Vote[]

    @@map("user")
}

model Feedback {
    id           Int              @id @default(autoincrement())
    title        String
    description  String
    authorId     Int              @map("author_id")
    createdAt    DateTime         @default(now()) @map("created_at")
    updatedAt    DateTime         @default(now()) @map("updated_at")
    categoryId Int              @map("categories_id")
    statusId     Int              @map("status_id")
    author       User             @relation(fields: [authorId], references: [id])
    category     FeedbackCategory @relation(fields: [categoryId], references: [id])
    status       FeedbackStatus   @relation(fields: [statusId], references: [id])
    votes        Vote[]

    @@map("feedback")
}

model Vote {
    id         Int @id @default(autoincrement())
    userId     Int @map("user_id")
    feedbackId Int @map("feedback_id")

    user     User     @relation(fields: [userId], references: [id])
    feedback Feedback @relation(fields: [feedbackId], references: [id])

    @@unique([userId, feedbackId]) // Ensure a user can only vote once per feedback
    @@map("vote")
}

model FeedbackStatus {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar(64)
    feedbacks Feedback[]

    @@map("feedback_status")
}

model FeedbackCategory {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar(64)
    feedbacks Feedback[]

    @@map("feedback_category")
}
